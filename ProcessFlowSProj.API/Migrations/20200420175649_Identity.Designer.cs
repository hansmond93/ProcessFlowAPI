// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProcessFlowSProj.API.Data;

namespace ProcessFlowSProj.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200420175649_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ApprovalLevelEntity", b =>
                {
                    b.Property<int>("ApprovalLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("OperationId");

                    b.Property<int>("Position");

                    b.Property<int>("RoleId");

                    b.HasKey("ApprovalLevelId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApprovalLevelEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ApprovalStatusEntity", b =>
                {
                    b.Property<int>("ApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalStatusName");

                    b.HasKey("ApprovalStatusId");

                    b.ToTable("ApprovalStatusEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ImagesEntity", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeAdded");

                    b.Property<string>("Description");

                    b.Property<int>("ProjectId");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.HasKey("ImageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImagesEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.OperationEntity", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OperationCode");

                    b.Property<string>("OperationName");

                    b.HasKey("OperationId");

                    b.ToTable("OperationEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ApprovedAmount");

                    b.Property<string>("CompanyEmail")
                        .IsRequired();

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<string>("ContactAddress")
                        .IsRequired();

                    b.Property<string>("ContactNumber")
                        .IsRequired();

                    b.Property<string>("ContactPerson")
                        .IsRequired();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<DateTime?>("DateTimeDeleted");

                    b.Property<DateTime?>("DateTimeModified");

                    b.Property<int?>("DeletedBy");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("DurationInMonths");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("ProjectTitle")
                        .IsRequired();

                    b.Property<decimal>("ProposedAmount");

                    b.HasKey("ProjectId");

                    b.ToTable("ProjectEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.StaffEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StaffCode");

                    b.Property<int?>("StaffLoginEntityId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("StaffLoginEntityId");

                    b.ToTable("StaffEntity");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.StaffLoginEntity", b =>
                {
                    b.Property<int>("StaffLoginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("StaffId");

                    b.HasKey("StaffLoginId");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("StaffLoginEntities");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.StaffRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("RoleCode");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("StaffRoleEntity");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.WorkFLowStatusEntity", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("StatusId");

                    b.ToTable("WorkFLowStatusEntity");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", b =>
                {
                    b.Property<int>("WorkFlowTrailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalStatusId");

                    b.Property<int?>("ApprovedByStaffId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateTimeApproved");

                    b.Property<int?>("FromLevelId");

                    b.Property<int?>("FromStaffId");

                    b.Property<int>("OperationId");

                    b.Property<int>("RequestStaffId");

                    b.Property<int>("StatusId");

                    b.Property<int>("TargetId");

                    b.Property<int?>("ToLevelId");

                    b.Property<int?>("ToStaffId");

                    b.HasKey("WorkFlowTrailId");

                    b.HasIndex("ApprovalStatusId")
                        .IsUnique();

                    b.HasIndex("ApprovedByStaffId")
                        .IsUnique()
                        .HasFilter("[ApprovedByStaffId] IS NOT NULL");

                    b.HasIndex("FromLevelId")
                        .IsUnique()
                        .HasFilter("[FromLevelId] IS NOT NULL");

                    b.HasIndex("FromStaffId")
                        .IsUnique()
                        .HasFilter("[FromStaffId] IS NOT NULL");

                    b.HasIndex("OperationId")
                        .IsUnique();

                    b.HasIndex("RequestStaffId")
                        .IsUnique();

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.HasIndex("ToLevelId")
                        .IsUnique()
                        .HasFilter("[ToLevelId] IS NOT NULL");

                    b.HasIndex("ToStaffId")
                        .IsUnique()
                        .HasFilter("[ToStaffId] IS NOT NULL");

                    b.ToTable("WorkFlowTrailEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ApprovalLevelEntity", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.OperationEntity", "OperationEntity")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffRoleEntity", "StaffRoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.ImagesEntity", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.ProjectEntity", "ProjectEntity")
                        .WithMany("ImagesEntities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.StaffEntity", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffRoleEntity", "StaffRoleEntity")
                        .WithMany("StaffEntities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffLoginEntity", "StaffLoginEntity")
                        .WithMany()
                        .HasForeignKey("StaffLoginEntityId");
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.StaffLoginEntity", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity", "StaffEntity")
                        .WithOne()
                        .HasForeignKey("ProcessFlowSProj.API.Entities.StaffLoginEntity", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", b =>
                {
                    b.HasOne("ProcessFlowSProj.API.Entities.ApprovalStatusEntity", "ApprovalStatus")
                        .WithOne("WorkFlowTrailEntity")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "ApprovalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity", "ApprovedByStaff")
                        .WithOne("WorkFlowTrailEntityApprovedBy")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "ApprovedByStaffId");

                    b.HasOne("ProcessFlowSProj.API.Entities.ApprovalLevelEntity", "FromLevel")
                        .WithOne("WorkFlowTrailEntityFromLevel")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "FromLevelId");

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity", "FromStaff")
                        .WithOne("WorkFlowTrailEntityFromStaff")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "FromStaffId");

                    b.HasOne("ProcessFlowSProj.API.Entities.OperationEntity", "OperationEntity")
                        .WithOne("WorkFlowTrailEntity")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "OperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity", "RequestStaff")
                        .WithOne("WorkFlowTrailEntityRequestStaff")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "RequestStaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.WorkFLowStatusEntity", "Status")
                        .WithOne("WorkFlowTrailEntity")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProcessFlowSProj.API.Entities.ApprovalLevelEntity", "ToLevel")
                        .WithOne("WorkFlowTrailEntityToLevel")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "ToLevelId");

                    b.HasOne("ProcessFlowSProj.API.Entities.StaffEntity", "ToStaff")
                        .WithOne("WorkFlowTrailEntityToStaff")
                        .HasForeignKey("ProcessFlowSProj.API.Entities.WorkFlowTrailEntity", "ToStaffId");
                });
#pragma warning restore 612, 618
        }
    }
}
